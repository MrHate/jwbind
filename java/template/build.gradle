apply plugin:'java'
apply plugin: 'de.inetsoftware.jwebassembly'

buildscript {
    repositories {
        mavenLocal()
        // maven { url uri('https://jitpack.io') }
        flatDir { dir '../jwasm-gradle/build/libs' }
    }
    dependencies {
        classpath 'com.github.i-net-software:jwebassembly-gradle:0.3'
    }
}
// dependencies {
//     implementation files('libs/something_local.jar')
// }
repositories {
    mavenLocal()
    flatDir { dir '../jwasm-api/build/libs' }
    // maven {
    //   url uri('../JWebAssembly/build/libs')
    // }
    // maven { url 'https://jitpack.io' }
}
dependencies {
    compile 'com.github.i-net-software:jwebassembly-api:0.3'
}

sourceSets {
    main {
        java {
            srcDir 'src/'
        }
    }
}

wasm {
  //Get more debug information if there are problems.
  //logging.level = LogLevel.DEBUG

  //Change the output format to the text format *.wat. 
  //This can be helpful to understand the problems if you see the generated code as text format.
  //format = 'text'

  //The used JWebAssembly compiler version. The default is the latest release '+'. 
  //You can set any valid Gradle version string or a full dependency string. 
  //The snapshot version is recommended until a stable release.
  //compilerVersion = 0.2
  compilerVersion = 'de.inetsoftware:jwebassembly-compiler:0.3'

  //Write method and parameter names into the output *.wasm file. 
  //The file will be approximate 10% larger. And it generate a source map. 
  //With a source map you can see in the debugger of the browser your source code if available.
  debugNames = true

  //Set an absolute or relative path between the final wasm file location and the source files location.
  ///This is needed for debugging in the browser. It work only if debugNames = true.
  //sourceMapBase = '../../src/main/java/'
  //sourceMapBase = '/src/main/java/'
}
