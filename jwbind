#!/bin/sh

if [ -z "$PYTHON" ]; then
  PYTHON=$(which python3 2> /dev/null)
fi

if [ -z "$PYTHON" ]; then
  echo 'unable to find python in $PATH'
  exit 1
fi

if [ -z "$@" ]; then
  echo 'Usage:\n\tjwbind <file>'
  exit 1
fi

JAVA_COM_DIR=java/template
JAVA_SRC_DIR=$JAVA_COM_DIR/src
JAVA_DIST_DIR=$JAVA_COM_DIR/build/distributions
TARGET_NAME=$(basename "$1" ".java")

if [ ! -d "/path/to/dir" ]; then
  mkdir -p $JAVA_SRC_DIR
fi

echo "rootProject.name = '$TARGET_NAME'" > $JAVA_COM_DIR/settings.gradle
rm -rf $JAVA_SRC_DIR/*
cp $@ $JAVA_SRC_DIR
(cd $JAVA_COM_DIR && make)
if [ $? -ne 0 ]; then
  echo 'JWebAssembly compilation failed.'
  exit 1
fi

cp "$JAVA_DIST_DIR/$TARGET_NAME.wasm" .

JWBIND_BUILD_DIR=.jwbind

CPP_TEMPLATE_DIR=cpp/wrapper
CPP_BUILD_DIR=$JWBIND_BUILD_DIR/cppbuild

rm -rf $JWBIND_BUILD_DIR
mkdir $JWBIND_BUILD_DIR
cp -r $CPP_TEMPLATE_DIR $CPP_BUILD_DIR

(exec "$PYTHON" "pytool/$0.py" "$TARGET_NAME.wasm")
if [ $? -ne 0 ]; then
  echo 'python tools parsing failed.'
  exit 1
fi

mv $TARGET_NAME.cpp $CPP_BUILD_DIR
cp $TARGET_NAME.h $CPP_BUILD_DIR

echo "add_library($TARGET_NAME $TARGET_NAME.cpp simple.cpp ${UNCOMMON_SHARED_SOURCE})" >> $CPP_BUILD_DIR/CMakeLists.txt
echo "target_link_libraries ($TARGET_NAME vmlib -lm -ldl -lpthread -lrt)" >> $CPP_BUILD_DIR/CMakeLists.txt
(cd $CPP_BUILD_DIR && cmake . && make)
if [ $? -ne 0 ]; then
  echo 'cpp template generating failed with cmake.'
  exit 1
fi

mv $CPP_BUILD_DIR/lib$TARGET_NAME.a .

# TODO: Copy wamr necessary headers
# TODO: Add complete sample