#!/bin/sh

# This file is the entry script to drive the whole tool chain to transpile
# out target java source file.

create_timestamp() {
  echo '('`date +"%s.%N"` ' * 1000000)/1' | bc
}
TS_FRONTEND_BEGIN=$(create_timestamp)

# Phase 0: Environment check.

if [ -z "$PYTHON" ]; then
  PYTHON=$(which python3 2> /dev/null)
fi

if [ -z "$PYTHON" ]; then
  echo 'unable to find python in $PATH'
  exit 1
fi

if [ -z "$@" ]; then
  echo 'Usage:\n\tjwbind <file>'
  exit 1
fi

JAVA_COM_DIR=java/template
JAVA_SRC_DIR=$JAVA_COM_DIR/src
JAVA_DIST_DIR=$JAVA_COM_DIR/build/distributions
TARGET_NAME=$(basename "$1" ".java")

# Phase 1: Compile Java source file with JWasm.


if [ ! -d "$JAVA_SRC_DIR" ]; then
  mkdir -p $JAVA_SRC_DIR
fi

echo "rootProject.name = '$TARGET_NAME'" > $JAVA_COM_DIR/settings.gradle
rm -rf $JAVA_SRC_DIR/*
(exec "$PYTHON" "pytool/jparser.py" $1) > $JAVA_SRC_DIR/$TARGET_NAME.java
TS_AFTER_PREPROCESS=$(create_timestamp)
# cp $@ $JAVA_SRC_DIR
(cd $JAVA_COM_DIR && make)
if [ $? -ne 0 ]; then
  echo 'JWebAssembly compilation failed.'
  exit 1
fi
cp "$JAVA_DIST_DIR/$TARGET_NAME.wasm" .

# Phase 2: Generate C++ from Wasm.

TS_BACKEND_BEGIN=$(create_timestamp)

JWBIND_BUILD_DIR=.jwbind

CPP_TEMPLATE_DIR=cpp/wrapper
CPP_BUILD_DIR=$JWBIND_BUILD_DIR/cppbuild

rm -rf $JWBIND_BUILD_DIR
mkdir $JWBIND_BUILD_DIR
cp -r $CPP_TEMPLATE_DIR $CPP_BUILD_DIR

(exec "$PYTHON" "pytool/$0.py" "$TARGET_NAME.wasm")
if [ $? -ne 0 ]; then
  echo 'python tools parsing failed.'
  exit 1
fi

TS_AFTER_CODEGEN=$(create_timestamp)

mv $TARGET_NAME.cpp $CPP_BUILD_DIR
if [ $? -ne 0 ]; then
  echo "cannot find $TARGET_NAME.cpp."
  exit 1
fi
cp $TARGET_NAME.h $CPP_BUILD_DIR
if [ $? -ne 0 ]; then
  echo "cannot find $TARGET_NAME.h."
  exit 1
fi

echo "add_library($TARGET_NAME $TARGET_NAME.cpp simple.cpp ${UNCOMMON_SHARED_SOURCE})" >> $CPP_BUILD_DIR/CMakeLists.txt
echo "target_link_libraries ($TARGET_NAME vmlib -lpthread)" >> $CPP_BUILD_DIR/CMakeLists.txt
(cd $CPP_BUILD_DIR && cmake . && make -j)
if [ $? -ne 0 ]; then
  echo 'cpp template generating failed with cmake.'
  exit 1
fi

# Move output files into target directory.

OUTPUT_DIR=out
WAMR_DIR=cpp/wamr/core/iwasm

if [ ! -d "$OUTPUT_DIR" ]; then
  mkdir -p $OUTPUT_DIR
else
  rm -rf $OUTPUT_DIR/*
fi

mv $CPP_BUILD_DIR/lib$TARGET_NAME.a $OUTPUT_DIR
mv $TARGET_NAME.* $OUTPUT_DIR
mv $CPP_BUILD_DIR/libvmlib.a $OUTPUT_DIR
mv $CPP_BUILD_DIR/simple.h $OUTPUT_DIR
cp $WAMR_DIR/include/* $OUTPUT_DIR

TS_JWBIND_END=$(create_timestamp)
echo '\nProcessing time:'
echo 'Preprocess:\t\t' $(($TS_AFTER_PREPROCESS - $TS_FRONTEND_BEGIN)) 'ms'
echo 'Front Compilation:\t' $(($TS_BACKEND_BEGIN - $TS_AFTER_PREPROCESS)) 'ms'
echo 'Frontend:\t\t' $(($TS_BACKEND_BEGIN - $TS_FRONTEND_BEGIN)) 'ms'
echo 'Codegen:\t\t' $(($TS_AFTER_CODEGEN - $TS_BACKEND_BEGIN)) 'ms'
echo 'Back Compilation:\t' $((TS_JWBIND_END - $TS_AFTER_CODEGEN)) 'ms'
echo 'Backend:\t\t' $(($TS_JWBIND_END - $TS_BACKEND_BEGIN)) 'ms'
echo 'Total:\t\t\t' $(($TS_JWBIND_END - $TS_FRONTEND_BEGIN)) 'ms'
